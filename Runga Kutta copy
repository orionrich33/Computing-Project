import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.animation import PillowWriter

#inputs
m_m = 7.348*1e22               #Mass of Moon
m_e = 5.972*1e24            #Mass of Earth
r_e = 4670*1e3                       #Radius of Earth to C.O.M. in km
r_m = 379728*1e3                 #Radius of Moon to C.O.M.
G = 6.67*1e-11                   #Gravitational constant
a = 10             #Time step 
phi = np.pi           #phase
d = 3.844*1e8               #earth-moon distance

#compute L2
l2_delta_r = d*(m_m/(3*m_e))**(1/3)
l2 = l2_delta_r+r_m 

#compute T
T = 2*np.pi*np.sqrt(((r_e+r_m)**3)/(G*(m_e+m_m)))           #Correct

#compute l2_v
l2_v = (l2*2*np.pi)/T

#create arrays
i_r_pos = np.array([l2,0])            #Initial position of rocket
i_r_vel = np.array([0,l2_v])            #Initial velocity of rocket
l_period = 29.5*24*60*60               #lunar period
N = round(6*l_period/a)         #number of iterations
s = (N,2)
s2 = (N+1,2)
m_pos = np.zeros(s)
e_pos = np.zeros(s)
r_pos = np.zeros(s2)
r_vel = np.zeros(s2)
r_acc = np.zeros(s)
r_pos[0] = i_r_pos
r_vel[0] = i_r_vel

def acc(zi,n):
    theta = (2*np.pi*(n*a)/T)
    e_p = np.array([r_e*np.cos(theta+phi), r_e*np.sin(theta+phi)])
    m_p = np.array([r_m*np.cos(theta), r_m*np.sin(theta)])
    de_x = zi[0]-e_p[0]
    dm_x = zi[0]-m_p[0]   #can subtract matrices later on...
    de_y = zi[1]-e_p[1]
    dm_y = zi[1]-m_p[1]
    de = np.sqrt((de_x)**2+(de_y)**2)
    dm = np.sqrt((dm_x)**2+(dm_y)**2)
    r_acc_x = (-1*G*m_e*(de_x))/(de**3) - ((G*m_m*(de_x))/(de**3))
    r_acc_y = (-1*G*m_e*(de_y))/(de**3) - ((G*m_m*(de_y))/(de**3))
    return np.array([r_acc_x, r_acc_y])

for n in range(0,N):
    theta = (2*np.pi*(n*a)/T)
    e_pos[n] = np.array([r_e*np.cos(theta+phi), r_e*np.sin(theta+phi)])
    m_pos[n] = np.array([r_m*np.cos(theta), r_m*np.sin(theta)])
    z1 = np.array([r_pos[n][0]+(a/2)*r_vel[n][0], r_pos[n][1]+(a/2)*r_vel[n][1]])
    n_acc = acc(r_pos[n],n)
    z1_dot = np.array([r_vel[n][0]+(a/2)*n_acc[0], r_vel[n][1]+(a/2)*n_acc[1]])
    z2 = np.array([r_pos[n][0]+(a/2)*z1_dot[0], r_pos[n][1]+(a/2)*z1_dot[1]])
    z1_acc = acc(z1,n+0.5)
    z2_dot = np.array([r_vel[n][0]+(a/2)*z1_acc[0], r_vel[n][1]+(a/2)*z1_acc[1]])
    z3 = np.array([r_pos[n][0]+a*z2_dot[0], r_pos[n][1]+a*z2_dot[1]])
    z2_acc = acc(z2,n+0.5)
    z3_dot = np.array([r_vel[n][0]+a*z2_acc[0], r_vel[n][1]+a*z2_acc[1]])
    z3_acc = acc(z3,n+1)
    r_pos_x = r_pos[n][0]+(a/6)*(r_vel[n][0]+2*z1_dot[0]+2*z2_dot[0]+z3_dot[0])
    r_pos_y = r_pos[n][1]+(a/6)*(r_vel[n][1]+2*z1_dot[1]+2*z2_dot[1]+z3_dot[1])
    r_pos[n+1] = [r_pos_x, r_pos_y]
    r_vel_x = r_vel[n][0]+(a/6)*(n_acc[0]+2*z1_acc[0]+2*z2_acc[0]+z3_acc[0])
    r_vel_y = r_vel[n][1]+(a/6)*(n_acc[1]+2*z1_acc[1]+2*z2_acc[1]+z3_acc[1])
    r_vel[n+1] = np.array([r_vel_x, r_vel_y])

xrocket = r_pos[0::5000][:,0]
yrocket = r_pos[0::5000][:,1]
xmoon = m_pos[0::5000][:,0]
ymoon = m_pos[0::5000][:,1]
xearth = e_pos[0::5000][:,0]
yearth = e_pos[0::5000][:,1]

plt.style.use('dark_background')

fig, ax = plt.subplots(figsize=(5, 5))
ax = plt.axes(xlim=(min(xrocket)+0.1*min(xrocket), max(xrocket)+0.1*max(xrocket)), ylim=(min(yrocket)+0.1*min(yrocket), max(yrocket)+0.1*max(yrocket)))
rocket, = ax.plot([], [], color='g', lw=1, label='Rocket')
moon, = ax.plot([], [], color='blue', lw=1, label='Moon')
earth, = ax.plot([], [], color='r', lw=1, label='Earth')

def animate(i):
    rocket.set_data(xrocket[:i],yrocket[:i])
    moon.set_data(xmoon[:i],ymoon[:i])
    earth.set_data(xearth[:i],yearth[:i])
    return rocket,moon,earth

anim = FuncAnimation(fig, animate, frames=len(xrocket), interval=50, repeat=False)
anim.save('cirlce_ani.gif', writer='pillow')
plt.legend()
plt.show()














